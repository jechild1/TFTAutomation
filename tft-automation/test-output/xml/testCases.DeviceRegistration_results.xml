<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Device Registration"
           tests="3"
           failures="1"
           errors="0"
           skipped="0"
           time="23.985">
  <properties />
            <testcase name="performRegistration" time="3.254" classname="testCases.DeviceRegistration">
                <failure type="org.openqa.selenium.InvalidElementStateException"
                  message="The device has already been registered.
Build info: version: &apos;3.11.0&apos;, revision: &apos;e59cfb3&apos;, time: &apos;2018-03-11T20:26:55.152Z&apos;
System info: host: &apos;TATRC-17323&apos;, ip: &apos;172.22.2.97&apos;, os.name: &apos;Windows 10&apos;, os.arch: &apos;amd64&apos;, os.version: &apos;10.0&apos;, java.version: &apos;1.8.0_144&apos;
Driver info: driver.version: unknown"
              >
<![CDATA[org.openqa.selenium.InvalidElementStateException: The device has already been registered.
Build info: version: '3.11.0', revision: 'e59cfb3', time: '2018-03-11T20:26:55.152Z'
System info: host: 'TATRC-17323', ip: '172.22.2.97', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_144'
Driver info: driver.version: unknown
  modularScripts.DeviceRegistrationMod.fitbitRegistration(DeviceRegistrationMod.java:66)
  testCases.DeviceRegistration.performRegistration(DeviceRegistration.java:184)
  sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
  sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
  java.lang.reflect.Method.invoke(Unknown Source)
  org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
  org.testng.internal.Invoker.invokeMethod(Invoker.java:661)
  org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
  org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
  org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
  org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
  java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
  java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
  java.lang.Thread.run(Unknown Source)
]]>
      </failure>

          </testcase>
  
  
            <testcase name="login" time="16.609" classname="testCases.DeviceRegistration" />
                <testcase name="performDeregistration" time="4.122" classname="testCases.DeviceRegistration" />
      
</testsuite>
